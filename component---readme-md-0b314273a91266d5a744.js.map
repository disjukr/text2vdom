{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"0RAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,eAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,aACJ,aACJA,YAAA,SAAI,yCACJA,YAAA,SAAI,mDACJA,YAAA,MACE,GAAM,QACJ,QACJA,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,eACX,4BAENH,YAAA,MACE,GAAM,OACJ,OACJA,YAAA,SAAI,SAASA,YAAA,KAAGG,WAAW,IACvB,KAAQ,uCACN,wCACNH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,gBACX,kkBAsBT,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,eAEDI,EAAWU,gBAAiB","file":"component---readme-md-0b314273a91266d5a744.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/me/github/disjukr/text2vdom/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"text2vdom\"\n    }}>{`text2vdom`}</h1>\n    <p>{`jsx스럽게 생긴 문자열을 파싱하여 React 노드로 변환해줍니다.`}</p>\n    <p>{`번역텍스트 사이에 리액트 컴포넌트를 끼워넣고 싶은 경우에 사용하기 위해 만들었습니다.`}</p>\n    <h2 {...{\n      \"id\": \"설치하기\"\n    }}>{`설치하기`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm install text2vdom\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"사용법\"\n    }}>{`사용법`}</h2>\n    <p>{`DEMO: `}<a parentName=\"p\" {...{\n        \"href\": \"https://disjukr.github.io/text2vdom\"\n      }}>{`https://disjukr.github.io/text2vdom`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import $ from 'text2vdom';\n\nconst text = \\`\n    react-dom에서 <b>기본 지원되는 태그는</b> 바로 사용할 수 있습니다.<br/>\n    <b>중첩된 <i>태그 사용</i></b>도 지원됩니다.<br/>\n    부등호를 쓰고싶으면 &lt;이렇게&gt; 사용해야합니다.<br/>\n    애트리뷰트는 쌍따옴표를 두르는 경우가 허용됩니다만,\n    그 정도로 복잡한 표현이 필요하다면 <my-tag>커스텀 태그</my-tag>를 사용하세요.<br/>\n    애트리뷰트 안에서 쌍따옴표를 사용하고 싶으면 \"&quot;이렇게&quot; 사용해야합니다.\"<br/>\n    다른 html 엔티티를 지원하지는 않습니다.\n\\`;\n\nconst MyComponent = () => <div>\n    { $(text, {\n        'my-tag': ({ children }) => <a href='https://github.com/disjukr'>\n            { children }\n        </a>,\n    }) }\n</div>;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}